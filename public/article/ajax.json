{
  "title": "Ajax(Asynchronous JavaScript and XML)详解",
  "author": "极品码农--罗源伟",
  "time": "2021-5-07 17:23:05",
  "content": [{
      "type": "subhead",
      "data": {
        "text": "简介："
      }
    },
    {
      "type": "paragraph",
      "data": {
        "content": [{
          "text": "通过 JavaScript 的异步通信，从服务器获取数据，并更新当前网页的对应部分，而不用刷新整个网页的一种技术。"
        }]
      }
    },
    {
      "type": "list",
      "data": {
        "desc": "步骤：AJAX 通过原生的XMLHttpRequest对象发出 HTTP 请求，得到服务器返回的数据后，再进行处理。",
        "content": [
          "创建 XMLHttpRequest 实例",
          "发出 HTTP 请求",
          "接收服务器传回的数据",
          "更新网页数据"
        ]
      }
    },
    {
      "type": "subhead",
      "data": {
        "text": "XMLHttpRequest 的实例属性："
      }
    },
    {
      "type": "table",
      "data": {
        "expand": true,
        "columns": [{
            "prop": "name",
            "label": "名称",
            "width": "160"
          },
          {
            "prop": "describe",
            "label": "描述"
          },
          {
            "prop": "change",
            "label": "只读",
            "width": "100"
          }
        ],
        "data": [{
            "name": "readyState",
            "value": "0, 1, 2, 3, 4",
            "describe": "<p>作用：返回一个整数，表示实例对象的当前状态</p>",
            "change": "只读",
            "expand": [
              "* 0，表示 XMLHttpRequest 实例已经生成，但是实例的open()方法还没有被调用。",
              "* 1，表示open()方法已经调用，但是实例的send()方法还没有调用，仍然可以使用实例的setRequestHeader()方法，设定 HTTP 请求的头信息。",
              "* 2，表示实例的send()方法已经调用，并且服务器返回的头信息和状态码已经收到。",
              "* 3，表示正在接收服务器传来的数据体（body 部分）。这时，如果实例的responseType属性等于text或者空字符串，responseText属性就会包含已经收到的部分信息。",
              "* 4，表示服务器返回的数据已经完全接收，或者本次接收已经失败。",
              "* 通信过程中，每当实例对象发生状态变化，它的readyState属性的值就会改变。这个值每一次变化，都会触发readyStateChange事件。"
            ],
            "code": [{
                "notes": "",
                "text": "",
                "print": ""
              }
            ]
          },
          {
            "name": "onreadystatechange",
            "value": "0, 1, 2, 3, 4",
            "describe": "<p>作用：指向一个监听函数</p>",
            "change": "",
            "expand": [
              "* readystatechange事件发生时（实例的readyState属性变化），就会执行这个属性。",
              "* 另外，如果使用实例的abort()方法，终止 XMLHttpRequest 请求，也会造成readyState属性变化，导致调用XMLHttpRequest.onreadystatechange属性。"
            ],
            "code": [{
                "notes": "",
                "text": "",
                "print": ""
              }
            ]
          },
          {
            "name": "response",
            "value": "0, 1, 2, 3, 4",
            "describe": "<p>作用：表示服务器返回的数据体（即 HTTP 回应的 body 部分）</p>",
            "change": "只读",
            "expand": [
              "* response可能是任何数据类型，比如字符串、对象、二进制对象等等，具体的类型由XMLHttpRequest.responseType属性决定。",
              "* 如果本次请求没有成功或者数据不完整，该属性等于null。",
              "* 但是，如果responseType属性等于text或空字符串，在请求没有结束之前（readyState等于3的阶段），response属性包含服务器已经返回的部分数据。"
            ],
            "code": [{
                "notes": "",
                "text": "",
                "print": ""
              }
            ]
          },
          {
            "name": "responseType",
            "value": "",
            "describe": "<p>作用：一个字符串，表示服务器返回数据的类型</p>",
            "change": "可写",
            "expand": [
              "* responseType 是可写的，可以在调用open()方法之后、调用send()方法之前，设置这个属性的值，告诉浏览器如何解读返回的数据。如果responseType设为空字符串，就等同于默认值text。",
              "* ''（空字符串）：等同于text，表示服务器返回文本数据。",
              "* 'arraybuffer'：ArrayBuffer 对象，表示服务器返回二进制数组。可以按照数组的方式处理二进制数据。",
              "* 'blob': Blob 对象，表示服务器返回二进制对象。适合读取二进制数据，比如图片文件。",
              "* 'document': Document 对象，表示服务器返回一个文档对象。适合返回 HTML / XML 文档的情况，这意味着，对于那些打开 CORS 的网站，可以直接用 Ajax 抓取网页，然后不用解析 HTML 字符串，直接对抓取回来的数据进行 DOM 操作。",
              "* 'json': JSON  对象。浏览器就会自动对返回数据调用JSON.parse()方法。也就是说，从xhr.response属性（注意，不是xhr.responseText属性）得到的不是文本，而是一个 JSON 对象。",
              "* 'text': 字符串。text类型适合大多数情况，而且直接处理文本也比较方便。"
            ],
            "code": [{
                "notes": "",
                "text": "",
                "print": ""
              }
            ]
          },
          {
            "name": "responseText",
            "value": "",
            "describe": "<p>作用：返回从服务器接收到的字符串</p>",
            "change": "只读",
            "expand": [
              "* 只有 HTTP 请求完成接收以后，该属性才会包含完整的数据。"
            ],
            "code": [{
                "notes": "",
                "text": "",
                "print": ""
              }
            ]
          },
          {
            "name": "responseXML",
            "value": "",
            "describe": "<p>作用：返回从服务器接收到的 HTML 或 XML 文档对象</p>",
            "change": "只读",
            "expand": [
              "* 如果本次请求没有成功，或者收到的数据不能被解析为 XML 或 HTML，responseXML属性等于null。",
              "* responseXML性生效的前提是 HTTP 回应的Content-Type头信息等于text/xml或application/xml。这要求在发送请求前，XMLHttpRequest.responseType属性要设为document。如果 HTTP 回应的Content-Type头信息不等于text/xml和application/xml，但是想从responseXML拿到数据（即把数据按照 DOM 格式解析），那么需要手动调用XMLHttpRequest.overrideMimeType()方法，强制进行 XML 解析。。",
              "* responseXML属性得到的数据，是直接解析后的文档 DOM 树。"
            ],
            "code": [{
                "notes": "",
                "text": "",
                "print": ""
              }
            ]
          },
          {
            "name": "responseURL",
            "value": "",
            "describe": "<p>作用：字符串，表示发送数据的服务器的网址</p>",
            "change": "只读",
            "expand": [
              "* 注意，这个属性的值与open()方法指定的请求网址不一定相同。如果服务器端发生跳转，这个属性返回最后实际返回数据的网址。另外，如果原始 URL 包括锚点（fragment），该属性会把锚点剥离。"
            ],
            "code": [{
                "notes": "",
                "text": "",
                "print": ""
              }
            ]
          },
          {
            "name": "status / statusText",
            "value": "",
            "describe": "<p>作用：返回从服务器接收到的字符串 / statusText属性返回一个字符串，表示服务器发送的状态提示。</p>",
            "change": "只读",
            "expand": [
              "* status属性返回一个整数，表示服务器回应的 HTTP 状态码。",
              "* 200, OK，访问正常。",
              "* 301, Moved Permanently，永久移动。",
              "* 302, Moved temporarily，暂时移动。",
              "* 304, Not Modified，未修改。",
              "* 307, Temporary Redirect，暂时重定向。",
              "* 401, Unauthorized，未授权。",
              "* 403, Forbidden，禁止访问。",
              "* 404, Not Found，未发现指定网址。",
              "* 500, Internal Server Error，服务器发生错误。"
            ],
            "code": [{
                "notes": "",
                "text": "",
                "print": ""
              }
            ]
          },
          {
            "name": "timeout",
            "value": "",
            "describe": "<p>作用：返回一个整数，表示多少毫秒后，如果请求仍然没有得到结果，就会自动终止。如果该属性等于0，就表示没有时间限制。</p>",
            "change": "只读",
            "expand": [
            ],
            "code": [{
                "notes": "",
                "text": "",
                "print": ""
              }
            ]
          },
          {
            "name": "XMLHttpRequestEventTarget.ontimeout",
            "value": "",
            "describe": "<p>作用：设置一个监听函数，如果发生 timeout 事件，就会执行这个监听函数。</p>",
            "change": "",
            "expand": [
            ],
            "code": [{
                "notes": "",
                "text": "",
                "print": ""
              }
            ]
          },
          {
            "name": "事件监听属性",
            "value": "",
            "describe": "<p>XMLHttpRequest 对象可以对以下事件指定监听函数。</p>",
            "change": "只读",
            "expand": [
              "* XMLHttpRequest.onloadstart：loadstart 事件（HTTP 请求发出）的监听函数。",
              "* XMLHttpRequest.onprogress：progress事件（正在发送和加载数据）的监听函数。",
              "* XMLHttpRequest.onabort：abort 事件（请求中止，比如用户调用了abort()方法）的监听函数。",
              "* XMLHttpRequest.onerror：error 事件（请求失败）的监听函数。如果发生网络错误（比如服务器无法连通），onerror事件无法获取报错信息。也就是说，可能没有错误对象，所以这样只能显示报错的提示。",
              "* XMLHttpRequest.onload：load 事件（请求成功完成）的监听函数。",
              "* XMLHttpRequest.ontimeout：timeout 事件（用户指定的时限超过了，请求还未完成）的监听函数。",
              "* XMLHttpRequest.onloadend：loadend 事件（请求完成，不管成功或失败）的监听函数。"
            ],
            "code": [{
                "notes": "",
                "text": "",
                "print": ""
              }
            ]
          },
          {
            "name": "withCredentials",
            "value": "",
            "describe": "<p>作用：一个布尔值，表示跨域请求时，用户信息（比如 Cookie 和认证的 HTTP 头信息）是否会包含在请求之中。</p>",
            "change": "",
            "expand": [
              "* 默认为false，即向example.com发出跨域请求时，不会发送example.com设置在本机上的 Cookie（如果有的话）。",
              "* 如果需要跨域 AJAX 请求发送 Cookie，需要withCredentials属性设为true。",
              "* 注意，同源的请求不需要设置这个属性。为了让这个属性生效，服务器必须显式返回Access-Control-Allow-Credentials这个头信息。",
              "* withCredentials属性打开的话，跨域请求不仅会发送 Cookie，还会设置远程主机指定的 Cookie。反之也成立，如果withCredentials属性没有打开，那么跨域的 AJAX 请求即使明确要求浏览器设置 Cookie，浏览器也会忽略。",
              "* 注意，脚本总是遵守同源政策，无法从document.cookie或者 HTTP 回应的头信息之中，读取跨域的 Cookie，withCredentials属性不影响这一点。"
            ],
            "code": [{
                "notes": "",
                "text": "",
                "print": ""
              }
            ]
          },
          {
            "name": "upload",
            "value": "",
            "describe": "<p>作用：发送文件以后，通过XMLHttpRequest.upload属性可以得到一个对象，通过观察这个对象，可以得知上传的进展。</p>",
            "change": "",
            "expand": [
              "* 发送文件，主要方法就是监听这个对象的各种事件：loadstart、loadend、load、abort、error、progress、timeout。。"
            ],
            "code": [{
                "notes": "",
                "text": "",
                "print": ""
              }
            ]
          }
        ]
      }
    },
    {
      "type": "subhead",
      "data": {
        "text": "XMLHttpRequest 的实例方法："
      }
    },
    {
      "type": "table",
      "data": {
        "expand": true,
        "columns": [{
            "prop": "name",
            "label": "名称",
            "width": "480"
          },
          {
            "prop": "describe",
            "label": "描述"
          }
        ],
        "data": [{
            "name": "XMLHttpRequest.open(method, url, async, user, password)",
            "describe": "<p>作用：用于指定 HTTP 请求的参数，或者说初始化 XMLHttpRequest 实例对象。</p>",
            "expand": [
              "* 参数说明：",
              "* method：表示 HTTP 动词方法，比如GET、POST、PUT、DELETE、HEAD等。",
              "* url: 表示请求发送目标 URL。",
              "* async: 布尔值，表示请求是否为异步，默认为true。如果设为false，则send()方法只有等到收到服务器返回了结果，才会进行下一步操作。该参数可选。由于同步 AJAX 请求会造成浏览器失去响应，许多浏览器已经禁止在主线程使用，只允许 Worker 里面使用。所以，这个参数轻易不应该设为false。",
              "* user：表示用于认证的用户名，默认为空字符串。该参数可选。",
              "* password：表示用于认证的密码，默认为空字符串。该参数可选。",
              "* 注意，如果对使用过open()方法的 AJAX 请求，再次使用这个方法，等同于调用abort()，即终止请求。"
            ],
            "code": [{
                "notes": "",
                "text": "",
                "print": ""
              }
            ]
          },
          {
            "name": "XMLHttpRequest.send()",
            "describe": "<p>作用：用于实际发出 HTTP 请求。</p>",
            "expand": [
              "* 参数说明：可选",
              "* 注意，所有 XMLHttpRequest 的监听事件，都必须在send()方法调用之前设定。"
            ],
            "code": [{
                "notes": "",
                "text": "",
                "print": ""
              }
            ]
          },
          {
            "name": "XMLHttpRequest.setRequestHeader(headerName, headerValue)",
            "describe": "<p>作用：用于设置浏览器发送的 HTTP 请求的头信息。</p>",
            "expand": [
              "* 参数说明：headerName 表示头信息的字段名, headerValue 字段值。",
              "* 注意，该方法必须在open()之后、send()之前调用。如果该方法多次调用，设定同一个字段，则每一次调用的值会被合并成一个单一的值发送。"
            ],
            "code": [{
                "notes": "",
                "text": "",
                "print": ""
              }
            ]
          },
          {
            "name": "XMLHttpRequest.overrideMimeType()",
            "describe": "<p>作用：用来指定 MIME 类型，覆盖服务器返回的真正的 MIME 类型，从而让浏览器进行不一样的处理。</p>",
            "expand": [
              "* 修改服务器返回的数据类型，不是正常情况下应该采取的方法。如果希望服务器返回指定的数据类型，可以用responseType属性告诉服务器。只有在服务器无法返回某种数据类型时，才使用overrideMimeType()方法。",
              "* 注意，该方法必须在send()方法之前调用。"
            ],
            "code": [{
                "notes": "",
                "text": "",
                "print": ""
              }
            ]
          },
          {
            "name": "XMLHttpRequest.getResponseHeader()",
            "describe": "<p>作用：返回 HTTP 头信息指定字段的值，如果还没有收到服务器回应或者指定字段不存在，返回null。该方法的参数不区分大小写。</p>",
            "expand": [
            ],
            "code": [{
                "notes": "",
                "text": "",
                "print": ""
              }
            ]
          },
          {
            "name": "XMLHttpRequest.getAllResponseHeaders()",
            "describe": "<p>作用：返回一个字符串，表示服务器发来的所有 HTTP 头信息。格式为字符串，每个头信息之间使用CRLF分隔（回车+换行），如果没有收到服务器回应，该属性为null。如果发生网络错误，该属性为空字符串。</p>",
            "expand": [
            ],
            "code": [{
                "notes": "",
                "text": "",
                "print": ""
              }
            ]
          },
          {
            "name": "XMLHttpRequest.abort()",
            "describe": "<p>作用：用来终止已经发出的 HTTP 请求。调用这个方法以后，readyState属性变为4，status属性变为0。</p>",
            "expand": [
            ],
            "code": [{
                "notes": "",
                "text": "",
                "print": ""
              }
            ]
          }
        ]
      }
    },
    {
      "type": "list",
      "data": {
        "desc": "参考资料：",
        "content": [
          "<a href='https://www.w3school.com.cn/jsref/jsref_obj_array.asp'>JavaScript Array 对象</a>",
          "<a href='https://es6.ruanyifeng.com/#docs/array'>阮一峰：《ECMAScript 6 入门》——数组的扩展</a>"
        ]
      }
    }
  ]
}
